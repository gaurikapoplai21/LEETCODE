class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) 
    {
        unordered_set<string> words(wordDict.begin(),wordDict.end());
        vector<bool> dp(s.size()+1,false);
        dp[0] = true;
        for(int i=1;i<=s.size();i++)
        {
            for(int j=i-1;j>=0;j--) //find suffix from index j to i in words then find if the word can be split from 0 to j
            {   
                if(find(words.begin(),words.end(),s.substr(j,i-j)) != words.end())
                {   
                    if(dp[j] == true)
                    {  
                        dp[i] = true;
                        break;
                    }
                }
                
            }
        }
        /*for(int i=0;i<=s.size();i++)
        {
            cout<<dp[i]<<" ";
        }*/
        return dp[s.size()];
        
    }
};
