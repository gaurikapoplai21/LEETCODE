/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
    {
        if(!l1)
        {
            return l2;
        }
        if(!l2)
        {
            return l1;
        }
        struct ListNode* head3;
        if(l1->val <= l2->val)
        {
            head3 = l1;
            l1 = l1 -> next;
        }
        else
        {
            head3 = l2;
            l2 = l2 -> next;
        }
        struct ListNode* tail = head3;
        //cout<<l1 -> val;
        //cout<<l2 -> val;
        while(l1 && l2)
        {
            if(l1 -> val <= l2 -> val)
            {
                tail->next = l1;
                l1 = l1 -> next;
                tail = tail -> next;
            }
            else
            {
                tail->next = l2;
                l2 = l2 -> next;
                tail = tail -> next;
            }
        }
        if(l1)
        {
            tail -> next = l1;
        }
        if(l2)
        {
            tail -> next = l2;
        }
        return head3;
        
    }

ListNode* sortList(ListNode* head) 
{
        
    if(head==NULL || head->next == NULL)
    {
         return head;
    }
    struct ListNode* slow = head;
    struct ListNode* fast = head->next;
    while(fast != NULL && fast -> next != NULL) //reach middle of linked list
    {
            slow = slow->next;
            fast = fast -> next -> next;
    }
    struct ListNode* head2 = slow->next;
    slow -> next = NULL;
    head = sortList(head);
    head2 = sortList(head2);
    return mergeTwoLists(head,head2);
    
    
    
    
   

   

        
}
};
