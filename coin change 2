class Solution {
public:
    int recurse(vector<int>& nums,int amount,int n,vector<vector<int>>& dp)
    {
        if(n == nums.size() && amount == 0)
        {
            dp[n][amount] = 1;
            return 1;
        }
        else if(n == nums.size())
        {   
            dp[n][amount] = 0;
            return 0;
        }
        else if(dp[n][amount] != -1)
        {
            return dp[n][amount];
        }
        if(nums[n] > amount)
        {
            return dp[n][amount] = recurse(nums,amount,n+1,dp);
        }
        return dp[n][amount] = recurse(nums,amount-nums[n],n,dp) + recurse(nums,amount,n+1,dp);
        
    }
    int change(int amount, vector<int>& coins) 
    {
        int n = 0;
        vector<vector<int>> dp(coins.size()+1,vector<int>(amount+1,-1));
        int ans = recurse(coins,amount,n,dp);
        return ans;
        
    }
};
