class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) 
    {
        //shortest transformation thats why bfs
        //unordred_set to reduce access time
        unordered_set<string> list;
        
        for(int i=0;i<wordList.size();i++)
        {
            list.insert(wordList[i]);
        }
        queue<string> q;
        q.push(beginWord);
        int depth = 0; 
        int level = 1;
        int next_level = 0;
        while(!q.empty())
        {
            ++depth;
            while(level--)
            {
                string word = q.front();
                q.pop();
                //cout<<word;
                
                for(int i=0;i<word.size();i++)
                {   string temp = word;
                    for(int j=0;j<26;j++)
                    {
                        if('a' + j != temp[i])
                        {
                            temp[i] = ('a' + j);
                        }
                        
                       // cout<<temp<<" ";
                       
                        //cout<<*it;
                        if(list.find(temp) != list.end())
                        {   //cout<<*it;
                            q.push(temp);
                            list.erase(temp);
                            ++next_level;
                            if(temp == endWord)
                            {
                                return depth + 1;
                            }
                            //cout<<*it;
                            
                        }
                        
                    }
                }
                
            }
            level = next_level;
            next_level = 0;
            
        }
        return 0;
        
        
        
    }
};
