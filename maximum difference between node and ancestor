/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> helper(struct TreeNode* root)
    {
        //recursive function to choose between maxleftdiff, maxrightdiff, root-maxnumleft, root-minnumleft,
        //root - maxnumright, root - minnumright
        vector<int> v(3); //initializing vector for every node
        v[0] = INT_MIN; //maxdiff
        v[1] = root->val;  //minnum
        v[2] = root->val; //maxnum
        if(root->left)
        {
            vector<int> subtree = helper(root->left);
            int diff = max(abs(root->val-subtree[1]),abs(root->val-subtree[2]));
            v[0] = max(subtree[0],diff);
            //v[0] = max(v[0],subtree[0]);
            v[1] = min(subtree[1],v[1]);
            v[2] = max(subtree[2],v[2]);
        }
        if(root->right)
        {
            vector<int> subtree = helper(root->right);
            int diff = max(abs(root->val-subtree[1]),abs(root->val-subtree[2]));
            v[0] = max(v[0],diff);
            v[0] = max(v[0],subtree[0]);
            v[1] = min(subtree[1],v[1]);
            v[2] = max(subtree[2],v[2]);
        }
        return v;
        
    }
    int maxAncestorDiff(TreeNode* root) 
    {
        //postorder traversal
        vector<int> ans = helper(root);
        return ans[0];
        
    }
};
