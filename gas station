class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) 
    {
        if(accumulate(gas.begin(),gas.end(),0) < accumulate(cost.begin(),cost.end(),0))
        {
            return -1;
        }
        int n = gas.size();
        gas.insert(gas.end(),gas.begin(),gas.end());
        cost.insert(cost.end(),cost.begin(),cost.end());
        int front = 0;
        int rear = 0;
        int balance = 0;
        
        while(rear != front + n - 1)
        {
            
            balance += (gas[rear] - cost[rear]);
           
            if(balance < 0)
            {
                front = rear + 1;
                balance = 0;
            }
            rear += 1;
        }
        return front;
        
        
    }
};
//O(2n),O(2n)
