/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans = 0;
    void sumsubtree(struct TreeNode* root,int& s)
    {
        if(root)
        {
            s += root->val;
            sumsubtree(root->left,s);
            sumsubtree(root->right,s);
        }
    }
    /*void printtree(struct TreeNode* root)
    {
        if(root)
        {
            cout<<root->val<<" ";
            printtree(root->left);
            printtree(root->right);
        }
    }*/
    
    int findTilt(TreeNode* root) 
    {
       if(!root)
        {
            return 0;
        }
        int left = 0;
        int right = 0;
        if(root->left)
        {
            int s = 0;
            sumsubtree(root->left,s);
            left = s;
        }
        else
        {
            left = 0;
        }
        if(root->right)
        {
            int s= 0;
            sumsubtree(root->right,s);
            right = s;
        }
        else
        {
            right = 0;
        }
        root->val = abs(left-right);
        ans += root->val;
        findTilt(root->left);
        findTilt(root->right);
        //printtree(root);
        return ans;
        
    }
};
