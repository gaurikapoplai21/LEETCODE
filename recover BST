/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void preorder(struct TreeNode* root,int a,int b)
    {
        if(root)
        {
            if(root->val == a)
            {
                root -> val = b;
            }
            else if(root->val == b)
            {
                root->val = a;
            }
            preorder(root->left,a,b);
            preorder(root->right,a,b);
        }
    }
    void inorder(struct TreeNode* root,vector<int>& v)
    {
        if(root)
        {
            inorder(root->left,v);
            v.push_back(root->val);
            inorder(root->right,v);
        }
    }
    void recoverTree(TreeNode* root) 
    {
        vector<int> v;
        inorder(root,v);
        vector<int> m = v;
        sort(m.begin(),m.end());
        int a,b;
        for(int i=0;i<v.size();i++)
        {
            if(v[i] != m[i])
            {
                a = v[i];
                b = m[i];
                break;
            }
        }
        preorder(root,a,b);
        
    }
};
