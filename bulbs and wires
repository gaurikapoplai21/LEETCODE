#include <iostream>
#include <bits/stdc++.h>
using namespace std;

typedef long long int lli;

int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        lli n, k;
        cin >> n >> k;
        string s;
        cin >> s;
        vector<lli> v;
        bool ctr = false;
        lli count = 0;
        for (lli i = 0; i < n; i++)
        {
            if (s[i] == '0' && ctr == false)
            {
                count = 1;
                ctr = true;
            }
            else if (s[i] == '0' && ctr == true)
            {
                count += 1;
            }
            else if (s[i] == '1' && ctr == true)
            {
                v.push_back(count);
                count = 0;
                ctr = false;
            }
        }
        int edgecase = 0;
        if (s[n - 1] == '0')
        {
            v.push_back(count);
            edgecase += 1;
        }
        if (s[0] == '0')
        {
            edgecase += 1;
        }
        if (edgecase == 1 && k % 2 != 0)
        {
            k = k - 1;
            if (s[0] == '0')
            {
                v.erase(v.begin());
            }
            else
            {
                v.pop_back();
            }
            //edgecase = 0;
        }
        else if (edgecase == 2 && k % 2 != 0)
        {
            k = k - 1;
            if (v[0] > v[v.size() - 1])
            {
                v.erase(v.begin());
            }
            else
            {
                v.pop_back();
            }
        }
        else if (edgecase == 2 && k % 2 == 0)
        {
            v[0] += v[v.size() - 1];
            v.pop_back();
            //edgecase = 0;
        }
        sort(v.begin(), v.end(), greater<int>());
        for (int i = 0; i < v.size(); i++)
        {
            if (k <= 1) //doubt
            {
                break;
            }
            else if (k > 1)
            {
                v[i] = 0;
                k = k - 2;
            }
        }
        lli ans = accumulate(v.begin(), v.end(), 0);
        cout << ans << "\n";
    }
}
