/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    void dfs(Node* old,unordered_map<Node*,Node*>& map)
    {
        map[old] = new Node(old->val);
        
        for(Node* i:old->neighbors)
        {
            if(map.find(i) == map.end())
            {   
                dfs(i,map);
                
            }
            map[old]->neighbors.push_back(map[i]);
        }
    }
    Node* cloneGraph(Node* node) 
    {
       if(!node)
       {
           return NULL;
       }
       unordered_map<Node*,Node*> map;
       dfs(node,map);
       return map[node];
        
    }
};
