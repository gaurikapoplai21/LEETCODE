/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 //in phase 2 ; number of nodes to reach ans node from head is same as that from intersection if slow & fast = head in the beginning
class Solution {
public:
    ListNode *detectCycle(ListNode *head) 
    {
        if(!head || !head->next)
        {
            return NULL;
        }
        
        struct ListNode* slow = head;
        struct ListNode* fast = head->next;
        while(fast != NULL && fast->next != NULL && slow != fast)
        {
            slow = slow->next;
            fast = fast->next->next;

        }
        if(slow != fast)
        {
            return NULL;
        }
        
            slow = slow->next;
            struct ListNode* temp = head;
            while(temp != slow)
            {
                temp = temp->next;
                slow = slow->next;
            }
        
        return temp;
        
    }
};
